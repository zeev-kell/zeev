.background-size(@option: cover) {
    -webkit-background-size: @option;
    background-size: @option;
}

.box-shadow(@option) {
    -webkit-box-shadow: @option;
    -moz-box-shadow: @option;
    box-shadow: @option;
}

.border-radius(@radius : 50%) {
    -webkit-border-radius: @radius;
    -moz-border-radius: @radius;
    border-radius: @radius;
}

.animation(@animation : bounceIn 1s linear 0s 1 normal running) {
    -webkit-animation: @animation;
    -moz-animation: @animation;
    -ms-animation: @animation;
    -o-animation: @animation;
    animation: @animation;
}

.animation-duration(@duration) {
    -webkit-animation-duration: @duration;
    -o-animation-duration: @duration;
    -moz-animation-duration: @duration;
    animation-duration: @duration;
}

.animation-name (@name) {
    -webkit-animation-name: @name;
    -moz-animation-name: @name;
    -o-animation-name: @name;
    animation-name: @name;
}

.animation-delay(@second : 0s) {
    -webkit-animation-delay: @second;
    -moz-animation-delay: @second;
    -o-animation-delay: @second;
    animation-delay: @second;
}

.animated-duration (@second: 1s) {
    -webkit-animation-duration: @second;
    -moz-animation-duration: @second;
    -o-animation-duration: @second;
    animation-duration: @second;
}

.animation-timing-function(@timing-function: ease) {
    -webkit-animation-timing-function: @timing-function;
    -moz-animation-timing-function: @timing-function;
    -o-animation-timing-function: @timing-function;
    animation-timing-function: @timing-function;
}

.animation-fill-mode(@fill : forwards) {
    -webkit-animation-fill-mode: @fill;
    -moz-animation-fill-mode: @fill;
    -o-animation-fill-mode: @fill;
    animation-fill-mode: @fill;
}

.animation-iteration-count(@count : 1) {
    -webkit-animation-iteration-count: @count;
    -moz-animation-iteration-count: @count;
    -o-animation-iteration-count: @count;
    animation-iteration-count: @count;
}

.transform(@option) {
    -webkit-transform: @option;
    -moz-transform: @option;
    -o-transform: @option;
    -ms-transform: @option;
    transform: @option;
}

.rotate(@ro :0deg) {
    .transform(rotate(@ro));
}

.skew(@roX :0deg, @roY :0deg) {
    .transform(skew(@roX, @roY));
}

.scale(@x :1, @y :1) {
    .transform(scale(@x, @y));
}

.scale3d(@x :1, @y :1, @z :1) {
    .transform(scale3d(@x, @y, @z));
}

.translate(@x :0px, @y :0px) {
    .transform(translate(@x, @y));
}

.transform_all(@rotate :0deg, @scaleX :1, @scaleY :1, @skewX :0deg, @skewY :0deg, @translateX :0px, @translateY :0px) {
    .transform(rotate(@rotate) scale(@scaleX, @scaleY) skew(@skewX, @skewY);
    translate(@translateX, @translateY));
    //filter: progid: DXImageTransform.Microsoft.BasicImage(rotation=3);
}

.transition-timing-function(@fun) {
    -webkit-transition-timing-function: @fun;
    -moz-transition-timing-function: @fun;
    -ms-transition-timing-function: @fun;
    -o-transition-timing-function: @fun;
    transition-timing-function: @fun;
}

.transition(@t :all 0.5s ease-in 0s) {
    -moz-transition: @t;
    -o-transition: @t;
    -webkit-transition: @t;
    transition: @t;
}

.transform-origin(@option: center center) {
    -webkit-transform-origin: @option;
    -moz-transform-origin: @option;
    -ms-transform-origin: @option;
    -o-transform-origin: @option;
    transform-origin: @option;
}

.background-image(@option) {
    background-image: -webkit-radial-gradient(@option);
    background-image: -moz-radial-gradient(@option);
    background-image: -ms-radial-gradient(@option);
    background-image: -o-radial-gradient(@option);
    background-image: radial-gradient(at @option);
}

.display-flex() {
    display: -webkit-flex;
    display: -webkit-box;
    display: -ms-flexbox;
    display: -moz-box;
    display: box;
    display: flex;
}


/*    默认值为0 1 auto
        flex-grow,
            属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。
        flex-shrink
            属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。
        flex-basis
            属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。
            浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小
    */

.flex(@option: 1 1 100%) {
    -webkit-box-flex: @option;
    -moz-box-flex: @option;
    -webkit-flex: @option;
    -ms-flex: @option;
    flex: @option;
}

.justify-content(@option: flex-start) {
    -webkit-box-justify-content: @option;
    -moz-box-justify-content: @option;
    -webkit-justify-content: @option;
    -ms-justify-content: @option;
    justify-content: @option;
}

.align-items(@option: center) {
    /* 09�� */
    -webkit-box-align: @option;
    /* 12�� */
    -webkit-align-items: @option;
    -moz-align-items: @option;
    -ms-align-items: @option;
    -o-align-items: @option;
    align-items: @option;
}

.flex-direction(@option : column) {
    -webkit-flex-direction: @option;
    -moz-flex-direction: @option;
    -ms-flex-direction: @option;
    -o-flex-direction: @option;
    flex-direction: @option;
}

.flex-direction-column() {
    -webkit-box-orient: vertical;
    -moz-box-orient: vertical;
    box-orient: vertical;
    -webkit-flex-direction: column;
    -moz-flex-direction: column;
    -ms-flex-direction: column;
    -o-flex-direction: column;
    flex-direction: column;
}

.flex-wrap(@option: row nowrap) {
    -webkit-flex-wrap: @option;
    -moz-flex-wrap: @option;
    -o-flex-wrap: @option;
    -ms-flex-wrap: @option;
    flex-wrap: @option;
}
